"""
Django settings for epcdata project.

Generated by 'django-admin startproject' using Django 3.2.6.

For more information on this file, see
https://docs.djangoproject.com/en/3.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.2/ref/settings/
"""

from pathlib import Path
import os
from dotenv import load_dotenv

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Determine which environment file to load
# Check for production environment indicator based on switch_env.ps1 logic or server IP
is_production = False

# Function to detect if running on production server
def detect_production_server():
    try:
        import socket
        # Get the server's IP address
        hostname = socket.gethostname()
        local_ip = socket.gethostbyname(hostname)
        
        # Check if running on the production VPS IP
        production_ips = ['80.95.207.42']
        
        # Also check for environment variables that indicate VPS deployment
        vps_indicators = [
            os.environ.get('SERVER_IP') == '80.95.207.42',
            os.environ.get('HOSTNAME', '').lower().find('vps') != -1,
            os.environ.get('HOSTNAME', '').lower().find('server') != -1,
        ]
        
        return local_ip in production_ips or any(vps_indicators)
    except:
        return False

# Check if explicitly set to production via environment variable
if os.environ.get('DJANGO_ENV') == 'production':
    is_production = True
    print("üåê Production mode: DJANGO_ENV=production")
# Check if running on production server IP
elif detect_production_server():
    is_production = True
    print("üåê Production mode: Detected VPS server IP (80.95.207.42)")
# Check if .prod file exists (created by switch_env.ps1 for production)
elif os.path.exists(BASE_DIR / '.prod'):
    is_production = True
    print("üåê Production mode: .prod file exists")
# Check if .env.production exists AND it's not disabled
elif (os.path.exists(BASE_DIR / '.env.production') and 
      not os.path.exists(BASE_DIR / '.env.production.disabled')):
    is_production = True
    print("üåê Production mode: .env.production file active")

if is_production:
    # Try to load production environment variables
    # When running on VPS, prefer .env.production which has the N0rfolk password
    if detect_production_server() and os.path.exists(BASE_DIR / '.env.production'):
        load_dotenv(BASE_DIR / '.env.production')
        print("üåê Loading VPS PRODUCTION environment from .env.production (N0rfolk password)")
    elif os.path.exists(BASE_DIR / '.prod'):
        load_dotenv(BASE_DIR / '.prod')
        print("üåê Loading PRODUCTION environment from .prod")
    elif os.path.exists(BASE_DIR / '.env.production'):
        load_dotenv(BASE_DIR / '.env.production')
        print("üåê Loading PRODUCTION environment from .env.production")
    print(f"DEBUG: Production mode - ALLOWED_HOSTS env var = {os.getenv('ALLOWED_HOSTS', 'NOT SET')}")
else:
    # Load local development environment variables
    if os.path.exists(BASE_DIR / '.env'):
        load_dotenv(BASE_DIR / '.env')
        print("üè† Loading LOCAL environment from .env (motorpartsdata + letmein123)")
    else:
        print("‚ö†Ô∏è No .env file found, using default settings")
    print(f"DEBUG: Local mode - ALLOWED_HOSTS env var = {os.getenv('ALLOWED_HOSTS', 'NOT SET')}")


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv('SECRET_KEY', 'django-insecure-aiqpmaxs^h@-@r#-nvtu)%p73-0#h3jkb_q99zj6+znx%+#s@6')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.getenv('DEBUG', 'True').lower() == 'true'

# Allow hosts from environment variable or use defaults
ALLOWED_HOSTS_STR = os.getenv('ALLOWED_HOSTS', '80.95.207.42,vanparts-direct.co.uk,www.vanparts-direct.co.uk,localhost,127.0.0.1,[::1]')
ALLOWED_HOSTS = [host.strip() for host in ALLOWED_HOSTS_STR.split(',')]
print(f"DEBUG: ALLOWED_HOSTS = {ALLOWED_HOSTS}")

# Security settings for production
SECURE_CROSS_ORIGIN_OPENER_POLICY = None  # Fix the COOP header warning
SECURE_BROWSER_XSS_FILTER = True
SECURE_CONTENT_TYPE_NOSNIFF = True
X_FRAME_OPTIONS = 'DENY'


# Application definition
import oscar

# Define custom apps that should replace Oscar's defaults
CUSTOM_OSCAR_APPS = [
    'checkout',  # Our custom checkout app
]

# Get Oscar's apps and replace checkout with our custom one
OSCAR_APPS = []
for app in oscar.INSTALLED_APPS:
    if 'checkout' in app and 'checkout' not in OSCAR_APPS:
        # Skip Oscar's checkout app, we'll use our custom one
        continue
    OSCAR_APPS.append(app)

INSTALLED_APPS = [
    # Your apps first (so they can override Oscar apps)
    'motorpartsdata',
    'payment',   # Custom payment app for Worldpay
    'checkout',  # Custom checkout app (must be before Oscar apps)
    'rest_framework',
    'sorl.thumbnail',  # Required for Oscar image thumbnails
    'django_countries',  # For country selection in shipping
] + OSCAR_APPS

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',  # Add WhiteNoise for static files
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    
    # Oscar middleware
    'oscar.apps.basket.middleware.BasketMiddleware',
]

# Debugging: Enable debug for static files in production temporarily
if DEBUG:
    WHITENOISE_AUTOREFRESH = True
    WHITENOISE_USE_FINDERS = True
    # Add debug info for static files
    import logging
    logging.getLogger('whitenoise').setLevel(logging.DEBUG)
    logging.getLogger('django.contrib.staticfiles').setLevel(logging.DEBUG)

ROOT_URLCONF = 'epcdata.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                
                # Oscar context processors (Oscar 3.2 compatible)
                'oscar.apps.search.context_processors.search_form',
                'oscar.apps.checkout.context_processors.checkout',
                'oscar.core.context_processors.metadata',
                
                # Custom context processors
                'epcdata.context_processors.uren_context',
            ],
        },
    },
]

WSGI_APPLICATION = 'epcdata.wsgi.application'


# Database
# https://docs.djangoproject.com/en/3.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': os.getenv('DB_ENGINE', 'django.db.backends.postgresql'),
        'NAME': os.getenv('DB_NAME', 'parts_store'),
        'USER': os.getenv('DB_USER', 'postgres'),
        'PASSWORD': os.getenv('DB_PASSWORD', 'N0rfolk'),
        'HOST': os.getenv('DB_HOST', 'localhost'),
        'PORT': os.getenv('DB_PORT', '5432'),
    }
}


# Password validation
# https://docs.djangoproject.com/en/3.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/3.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.2/howto/static-files/

STATIC_URL = '/static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')

# Static files directories - collect from these locations
STATICFILES_DIRS = [
    os.path.join(BASE_DIR, 'motortemplate'),  # Now points to the correct location
]

# Static files finders
STATICFILES_FINDERS = [
    'django.contrib.staticfiles.finders.FileSystemFinder',
    'django.contrib.staticfiles.finders.AppDirectoriesFinder',
]

# WhiteNoise configuration for static file serving
# Use simple storage in production for better compatibility
STATICFILES_STORAGE = 'django.contrib.staticfiles.storage.StaticFilesStorage'
WHITENOISE_USE_FINDERS = True  # This allows WhiteNoise to serve from STATICFILES_DIRS directly
WHITENOISE_AUTOREFRESH = True  # Auto-refresh files in development
WHITENOISE_SKIP_COMPRESS_EXTENSIONS = ['js', 'css']  # Skip compression for debugging

# Additional WhiteNoise settings for better static file serving
WHITENOISE_INDEX_FILE = True  # Serve index files
WHITENOISE_MIMETYPES = {
    '.css': 'text/css',
    '.js': 'application/javascript',
}

# Media files
MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

# Sites framework
SITE_ID = 1

# Oscar configuration
from oscar.defaults import *

# Oscar settings
OSCAR_DEFAULT_CURRENCY = 'GBP'
OSCAR_SHOP_NAME = 'EPC Motor Parts Store'
OSCAR_SHOP_TAGLINE = 'Your trusted motor parts supplier'

# Disable email confirmation for user registration in development
OSCAR_SEND_REGISTRATION_EMAIL = False

# Configure Oscar URLs for "View on site" functionality
OSCAR_HOMEPAGE = '/'

# Haystack (for Oscar search)
HAYSTACK_CONNECTIONS = {
    'default': {
        'ENGINE': 'haystack.backends.simple_backend.SimpleEngine',
    },
}

# Default primary key field type
# https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Logging configuration for debugging
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'handlers': {
        'console': {
            'class': 'logging.StreamHandler',
        },
    },
    'loggers': {
        'django': {
            'handlers': ['console'],
            'level': 'INFO',
        },
        'oscar': {
            'handlers': ['console'],
            'level': 'INFO',
        },
        'django.contrib.staticfiles': {
            'handlers': ['console'],
            'level': 'DEBUG',
        },
        'whitenoise': {
            'handlers': ['console'],
            'level': 'DEBUG',
        },
    },
}

# Authentication settings
LOGIN_URL = '/accounts/login/'
LOGIN_REDIRECT_URL = '/accounts/'
LOGOUT_REDIRECT_URL = '/'

# Authentication backends
AUTHENTICATION_BACKENDS = [
    'oscar.apps.customer.auth_backends.EmailBackend',
    'django.contrib.auth.backends.ModelBackend',
]

# Email configuration for development
EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'

# Alternatively, to disable emails completely in development:
# EMAIL_BACKEND = 'django.core.mail.backends.dummy.EmailBackend'

# Django Countries Configuration
COUNTRIES_FIRST = ['GB', 'US', 'IE', 'FR', 'DE']  # Prioritize common shipping countries
COUNTRIES_FIRST_REPEAT = True  # Show priority countries at top and in alphabetical order
COUNTRIES_FIRST_BREAK = '‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ'  # Visual separator in dropdown

# Worldpay Configuration
# You need to get these values from your Worldpay dashboard
WORLDPAY_INSTALLATION_ID = os.getenv('WORLDPAY_INSTALLATION_ID', 'YOUR_INSTALLATION_ID')
WORLDPAY_SECRET_KEY = os.getenv('WORLDPAY_SECRET_KEY', 'YOUR_SECRET_KEY')  # Optional but recommended
WORLDPAY_TEST_MODE = os.getenv('WORLDPAY_TEST_MODE', 'True').lower() == 'true'  # Set to False for production

# Worldpay Callback Password (set this in your Worldpay dashboard)
WORLDPAY_CALLBACK_PASSWORD = os.getenv('WORLDPAY_CALLBACK_PASSWORD', 'YOUR_CALLBACK_PASSWORD')
